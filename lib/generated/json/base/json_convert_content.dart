// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:PureWeather/accuweather/hourly/accu_hourly_data_entity.dart';
import 'package:PureWeather/generated/json/accu_hourly_data_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case AccuHourlyDataEntity:
			return accuHourlyDataEntityFromJson(data as AccuHourlyDataEntity, json) as T;			case AccuHourlyDataTemperature:
			return accuHourlyDataTemperatureFromJson(data as AccuHourlyDataTemperature, json) as T;			case AccuHourlyDataRealFeelTemperature:
			return accuHourlyDataRealFeelTemperatureFromJson(data as AccuHourlyDataRealFeelTemperature, json) as T;			case AccuHourlyDataWetBulbTemperature:
			return accuHourlyDataWetBulbTemperatureFromJson(data as AccuHourlyDataWetBulbTemperature, json) as T;			case AccuHourlyDataDewPoint:
			return accuHourlyDataDewPointFromJson(data as AccuHourlyDataDewPoint, json) as T;			case AccuHourlyDataWind:
			return accuHourlyDataWindFromJson(data as AccuHourlyDataWind, json) as T;			case AccuHourlyDataWindSpeed:
			return accuHourlyDataWindSpeedFromJson(data as AccuHourlyDataWindSpeed, json) as T;			case AccuHourlyDataWindDirection:
			return accuHourlyDataWindDirectionFromJson(data as AccuHourlyDataWindDirection, json) as T;			case AccuHourlyDataWindGust:
			return accuHourlyDataWindGustFromJson(data as AccuHourlyDataWindGust, json) as T;			case AccuHourlyDataWindGustSpeed:
			return accuHourlyDataWindGustSpeedFromJson(data as AccuHourlyDataWindGustSpeed, json) as T;			case AccuHourlyDataVisibility:
			return accuHourlyDataVisibilityFromJson(data as AccuHourlyDataVisibility, json) as T;			case AccuHourlyDataCeiling:
			return accuHourlyDataCeilingFromJson(data as AccuHourlyDataCeiling, json) as T;			case AccuHourlyDataTotalLiquid:
			return accuHourlyDataTotalLiquidFromJson(data as AccuHourlyDataTotalLiquid, json) as T;			case AccuHourlyDataRain:
			return accuHourlyDataRainFromJson(data as AccuHourlyDataRain, json) as T;			case AccuHourlyDataSnow:
			return accuHourlyDataSnowFromJson(data as AccuHourlyDataSnow, json) as T;			case AccuHourlyDataIce:
			return accuHourlyDataIceFromJson(data as AccuHourlyDataIce, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case AccuHourlyDataEntity:
			return accuHourlyDataEntityToJson(data as AccuHourlyDataEntity);			case AccuHourlyDataTemperature:
			return accuHourlyDataTemperatureToJson(data as AccuHourlyDataTemperature);			case AccuHourlyDataRealFeelTemperature:
			return accuHourlyDataRealFeelTemperatureToJson(data as AccuHourlyDataRealFeelTemperature);			case AccuHourlyDataWetBulbTemperature:
			return accuHourlyDataWetBulbTemperatureToJson(data as AccuHourlyDataWetBulbTemperature);			case AccuHourlyDataDewPoint:
			return accuHourlyDataDewPointToJson(data as AccuHourlyDataDewPoint);			case AccuHourlyDataWind:
			return accuHourlyDataWindToJson(data as AccuHourlyDataWind);			case AccuHourlyDataWindSpeed:
			return accuHourlyDataWindSpeedToJson(data as AccuHourlyDataWindSpeed);			case AccuHourlyDataWindDirection:
			return accuHourlyDataWindDirectionToJson(data as AccuHourlyDataWindDirection);			case AccuHourlyDataWindGust:
			return accuHourlyDataWindGustToJson(data as AccuHourlyDataWindGust);			case AccuHourlyDataWindGustSpeed:
			return accuHourlyDataWindGustSpeedToJson(data as AccuHourlyDataWindGustSpeed);			case AccuHourlyDataVisibility:
			return accuHourlyDataVisibilityToJson(data as AccuHourlyDataVisibility);			case AccuHourlyDataCeiling:
			return accuHourlyDataCeilingToJson(data as AccuHourlyDataCeiling);			case AccuHourlyDataTotalLiquid:
			return accuHourlyDataTotalLiquidToJson(data as AccuHourlyDataTotalLiquid);			case AccuHourlyDataRain:
			return accuHourlyDataRainToJson(data as AccuHourlyDataRain);			case AccuHourlyDataSnow:
			return accuHourlyDataSnowToJson(data as AccuHourlyDataSnow);			case AccuHourlyDataIce:
			return accuHourlyDataIceToJson(data as AccuHourlyDataIce);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'AccuHourlyDataEntity':
			return AccuHourlyDataEntity().fromJson(json);			case 'AccuHourlyDataTemperature':
			return AccuHourlyDataTemperature().fromJson(json);			case 'AccuHourlyDataRealFeelTemperature':
			return AccuHourlyDataRealFeelTemperature().fromJson(json);			case 'AccuHourlyDataWetBulbTemperature':
			return AccuHourlyDataWetBulbTemperature().fromJson(json);			case 'AccuHourlyDataDewPoint':
			return AccuHourlyDataDewPoint().fromJson(json);			case 'AccuHourlyDataWind':
			return AccuHourlyDataWind().fromJson(json);			case 'AccuHourlyDataWindSpeed':
			return AccuHourlyDataWindSpeed().fromJson(json);			case 'AccuHourlyDataWindDirection':
			return AccuHourlyDataWindDirection().fromJson(json);			case 'AccuHourlyDataWindGust':
			return AccuHourlyDataWindGust().fromJson(json);			case 'AccuHourlyDataWindGustSpeed':
			return AccuHourlyDataWindGustSpeed().fromJson(json);			case 'AccuHourlyDataVisibility':
			return AccuHourlyDataVisibility().fromJson(json);			case 'AccuHourlyDataCeiling':
			return AccuHourlyDataCeiling().fromJson(json);			case 'AccuHourlyDataTotalLiquid':
			return AccuHourlyDataTotalLiquid().fromJson(json);			case 'AccuHourlyDataRain':
			return AccuHourlyDataRain().fromJson(json);			case 'AccuHourlyDataSnow':
			return AccuHourlyDataSnow().fromJson(json);			case 'AccuHourlyDataIce':
			return AccuHourlyDataIce().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'AccuHourlyDataEntity':
			return List<AccuHourlyDataEntity>();			case 'AccuHourlyDataTemperature':
			return List<AccuHourlyDataTemperature>();			case 'AccuHourlyDataRealFeelTemperature':
			return List<AccuHourlyDataRealFeelTemperature>();			case 'AccuHourlyDataWetBulbTemperature':
			return List<AccuHourlyDataWetBulbTemperature>();			case 'AccuHourlyDataDewPoint':
			return List<AccuHourlyDataDewPoint>();			case 'AccuHourlyDataWind':
			return List<AccuHourlyDataWind>();			case 'AccuHourlyDataWindSpeed':
			return List<AccuHourlyDataWindSpeed>();			case 'AccuHourlyDataWindDirection':
			return List<AccuHourlyDataWindDirection>();			case 'AccuHourlyDataWindGust':
			return List<AccuHourlyDataWindGust>();			case 'AccuHourlyDataWindGustSpeed':
			return List<AccuHourlyDataWindGustSpeed>();			case 'AccuHourlyDataVisibility':
			return List<AccuHourlyDataVisibility>();			case 'AccuHourlyDataCeiling':
			return List<AccuHourlyDataCeiling>();			case 'AccuHourlyDataTotalLiquid':
			return List<AccuHourlyDataTotalLiquid>();			case 'AccuHourlyDataRain':
			return List<AccuHourlyDataRain>();			case 'AccuHourlyDataSnow':
			return List<AccuHourlyDataSnow>();			case 'AccuHourlyDataIce':
			return List<AccuHourlyDataIce>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}